@page "/chat"
@page "/chat/{PatientId:int}"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using SM_MentalHealthApp.Client.Services
@using SM_MentalHealthApp.Shared
@inject HttpClient Http
@inject IJSRuntime JS
@inject IAuthService AuthService

<div class="chat-container">
    <!-- Chat Mode Header (Only for Doctors and Admins) -->
    @if (AuthService.CurrentUser?.RoleId == 2 || AuthService.CurrentUser?.RoleId == 3) // Doctor or Admin
    {
        <div class="chat-header">
            <div class="mode-selector">
                <label style="white-space: nowrap; margin-bottom: 8px; display: block;">ü§ñ Chat Mode:</label>
                <div class="mode-buttons">
                    <button class="mode-button @(IsGenericMode ? "" : "active")" @onclick="() => SetMode(false)">
                        üë§ Patient Chat
                    </button>
                    <button class="mode-button @(IsGenericMode ? "active" : "")" @onclick="() => SetMode(true)">
                        üåê Generic AI
                    </button>
                </div>
            </div>
            
            @if (!IsGenericMode)
            {
                <div class="patient-selector">
                    <label style="white-space: nowrap; margin-bottom: 8px; display: block;">üë§ Select Patient:</label>
                    <RadzenDropDown @bind-Value="SelectedUserId" 
                                   Data="@Users" 
                                   ValueProperty="Id" 
                                   TextProperty="FullName"
                                   Placeholder="Search patients..." 
                                   AllowClear="true"
                                   AllowFiltering="true"
                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   Change="@OnUserChanged"
                                   Style="width: 100%; min-width: 350px; max-width: 500px;"
                                   TValue="int">
                        <Template Context="user">
                            <div style="padding: 6px 8px; line-height: 1.2;">
                                <div style="font-weight: 500; font-size: 14px; margin-bottom: 2px;">@user.FirstName @user.LastName</div>
                                <div style="font-size: 12px; color: #666; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@user.Email ‚Ä¢ ID: @user.Id</div>
                            </div>
                        </Template>
                    </RadzenDropDown>
                </div>
                @if (SelectedUser != null)
                {
                    <div class="patient-info">
                        <div class="patient-details">
                            <span class="patient-name">@SelectedUser.FirstName @SelectedUser.LastName</span>
                            <span class="patient-email">@SelectedUser.Email</span>
                            <span class="patient-id">User ID: @SelectedUser.Id</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="generic-info">
                    <div class="generic-details">
                        <span class="generic-title">üåê Generic AI Assistant</span>
                        <span class="generic-description">Ask me anything - medical research, general knowledge, or any topic you need help with</span>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Simple header for patients -->
        <div class="chat-header">
            <div class="chat-title">
                <h2>üí¨ Mental Health Chat</h2>
                <p>Your personal AI companion for mental health support</p>
            </div>
        </div>
    }
    <!-- <div class="nav-links">
        <a href="/chat" class="nav-link active">WonderWorld Chat</a>
        <a href="/regularchat" class="nav-link">Regular Chat</a>
        <a href="/piichat" class="nav-link">PII Chat</a>
        <a href="/reviews" class="nav-link">Reviews</a>
    </div> -->
    
    <div class="chat-messages" id="chatMessages">
        @if (Messages.Any())
        {
            @foreach (var message in Messages)
            {
                @if (message.StartsWith("You:"))
                {
                    <div class="message-container user-container">
                        <div class="message user-message">
                            <div class="message-content">
                                @message.Substring(4)
                            </div>
                        </div>
                    </div>
                }
                else if (message.StartsWith("Bot:"))
                {
                    <div class="message-container bot-container">
                        <div class="message bot-message">
                            <div class="message-content">
                                @message.Substring(4)
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="message-container system-container">
                        <div class="message system-message">
                            <div class="message-content">
                                @message
                            </div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="welcome-message">
                <p>Welcome to the Mental Health Chat! Start a conversation by typing a message below.</p>
            </div>
        }
        
        @if (IsLoading)
        {
            <div class="message-container bot-container">
                <div class="message bot-message">
                    <div class="message-content">
                        <div style="display: flex; flex-direction: row; gap: 6px;">
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.2s;"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.4s;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="chat-input-container">
        <div class="input-wrapper">
            <input 
                @bind="UserInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="Ask me anything about mental health..." 
                class="chat-input" 
                disabled="@IsLoading"
                maxlength="1000"
            />
            <button 
                @onclick="ToggleSound" 
                class="sound-toggle @(SoundEnabled ? "enabled" : "disabled")"
                title="@(SoundEnabled ? "Disable sounds" : "Enable sounds")"
            >
                @if (SoundEnabled)
                {
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                        <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                    </svg>
                }
                else
                {
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                        <line x1="23" y1="9" x2="17" y2="15"></line>
                        <line x1="17" y1="9" x2="23" y2="15"></line>
                    </svg>
                }
            </button>
            <button 
                @onclick="Send" 
                disabled="@IsLoading || string.IsNullOrWhiteSpace(UserInput)" 
                class="send-button"
            >
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22,2 15,22 11,13 2,9"></polygon>
                </svg>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? PatientId { get; set; }
    [Parameter] public int? UserId { get; set; }
    
    private string UserInput { get; set; } = string.Empty;
    private List<string> Messages = new();
    private bool IsLoading = false;
    private bool SoundEnabled { get; set; } = true;
    
    // User management
    private List<User> Users = new();
    private int SelectedUserId = 1; // Default to User 1
    private User? SelectedUser = null;
    
    // Chat mode management
    private bool IsGenericMode = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser?.RoleId == 2) // Doctor
        {
            await LoadUsers();
            
            // If PatientId is provided in the URL, use it as UserId
            if (PatientId.HasValue)
            {
                SelectedUserId = PatientId.Value;
            }
            // If UserId is provided in the URL, use it
            else if (UserId.HasValue)
            {
                SelectedUserId = UserId.Value;
            }
            
            await LoadSelectedUser();
        }
        else if (AuthService.CurrentUser?.RoleId == 1) // Patient
        {
            // For patients, they chat as themselves
            SelectedUserId = AuthService.CurrentUser.Id;
            await LoadSelectedUser();
        }
        
        // Add welcome message
        Messages.Add("Bot: Hello! I'm your mental health companion. How can I help you today?");
        
        // Initialize sound setting
        await InitializeSound();
    }

    private async Task LoadUsers()
    {
        try
        {
            // Only load users for doctors (their assigned patients)
            if (AuthService.CurrentUser?.RoleId == 2)
            {
                Users = await Http.GetFromJsonAsync<List<User>>($"api/admin/doctor/{AuthService.CurrentUser.Id}/patients") ?? new();
            }
            else
            {
                Users = new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            Messages.Add($"System: Error loading users - {ex.Message}");
        }
    }

    private void SetMode(bool isGeneric)
    {
        IsGenericMode = isGeneric;
        if (isGeneric)
        {
            // Clear patient selection when switching to generic mode
            SelectedUserId = 0;
            SelectedUser = null;
            Messages.Clear();
            Messages.Add("Bot: Hello! I'm your generic AI assistant. I can help you with any topic - medical research, general knowledge, or any questions you have. How can I assist you today?");
        }
        else
        {
            // Clear messages when switching to patient mode
            Messages.Clear();
            Messages.Add("Bot: Hello! I'm your mental health AI assistant. Select a patient to get personalized clinical insights and recommendations.");
        }
        StateHasChanged();
    }

    private async Task LoadSelectedUser()
    {
        try
        {
            SelectedUser = await Http.GetFromJsonAsync<User>($"api/user/{SelectedUserId}");
            if (SelectedUser != null)
            {
                Messages.Add($"System: üë§ Now chatting as {SelectedUser.FirstName} {SelectedUser.LastName} (User ID: {SelectedUser.Id})");
                Messages.Add($"System: üìä AI will provide personalized responses based on {SelectedUser.FirstName}'s journal entries and mood patterns");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading selected user: {ex.Message}");
            Messages.Add($"System: Error loading user data - {ex.Message}");
        }
    }

    private async Task OnUserChanged()
    {
        Messages.Clear();
        await LoadSelectedUser();
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(UserInput) && !IsLoading)
        {
            await Send();
        }
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || IsLoading) return;
        
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            // Play send sound
            if (SoundEnabled)
            {
                await JS.InvokeVoidAsync("playSound", "send");
            }
            
            var request = new { 
                prompt = UserInput, 
                conversationId = Guid.NewGuid().ToString(), 
                provider = 3, 
                patientId = IsGenericMode ? 0 : (AuthService.CurrentUser?.RoleId == 2 ? SelectedUserId : (AuthService.CurrentUser?.Id ?? 0)), // For generic mode, use 0; for doctors, use selected patient ID; for patients, use their own ID
                userId = AuthService.CurrentUser?.Id ?? 0,
                userRoleId = AuthService.CurrentUser?.RoleId ?? 0,
                isGenericMode = IsGenericMode
            };
            var response = await Http.PostAsJsonAsync("api/chat/send", request);
            var data = await response.Content.ReadFromJsonAsync<ChatResponse>();
            
            Messages.Add($"You: {UserInput}");
            UserInput = string.Empty;
            
            // Simple delay to show typing animation
            await Task.Delay(1500);
            
            if (data?.Message != null)
            {
                Messages.Add($"Bot: {data.Message}");
                // Play receive sound
                if (SoundEnabled)
                {
                    await JS.InvokeVoidAsync("playSound", "receive");
                }
            }
            else
            {
                Messages.Add($"Bot: Sorry, I couldn't process your request.");
                // Play error sound for failed requests
                if (SoundEnabled)
                {
                    await JS.InvokeVoidAsync("playSound", "error");
                }
            }
        }
        catch (Exception ex)
        {
            Messages.Add($"Error: {ex.Message}");
            // Play error sound
            if (SoundEnabled)
            {
                await JS.InvokeVoidAsync("playSound", "error");
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            
            // Scroll to bottom after sending message
            await Task.Delay(100);
            await JS.InvokeVoidAsync("scrollToBottom");
        }
    }


    private async Task ToggleSound()
    {
        SoundEnabled = !SoundEnabled;
        await JS.InvokeVoidAsync("setSoundEnabled", SoundEnabled);
        StateHasChanged();
    }

    // Initialize sound setting
    private async Task InitializeSound()
    {
        await JS.InvokeVoidAsync("setSoundEnabled", SoundEnabled);
    }
}
