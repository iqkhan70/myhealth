@page "/users"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject IAuthService AuthService
@using SM_MentalHealthApp.Shared
@using SM_MentalHealthApp.Client.Services

<div class="users-page">
    <div class="users-header">
        @if (AuthService.CurrentUser?.RoleId == 2) // Doctor
        {
            <h2>My Patients</h2>
            <p>View and manage your assigned users' mental health journey.</p>
        }
        else if (AuthService.CurrentUser?.RoleId == 3) // Admin
        {
            Console.WriteLine("This is at test page");
            <h2>All Patients</h2>
            <p>Manage all patient records and view their mental health journey.</p>
            <button @onclick="ShowAddPatientForm" class="add-patient-btn">
                ‚ûï Add New Patient
            </button>
        }
        else
        {
            <h2>Access Denied</h2>
            <p>You don't have permission to view this page.</p>
        }
    </div>

    @if (AuthService.CurrentUser?.RoleId == 2 || AuthService.CurrentUser?.RoleId == 3) // Doctor or Admin
    {
        <!-- Search and Filter -->
        <div class="search-section">
            <div class="search-bar">
                <input @bind="searchTerm" @bind:after="FilterUsers" 
                       placeholder="Search users by name or email..." 
                       class="search-input" />
                <button @onclick="SearchPatients" class="search-btn">üîç</button>
            </div>
            <div class="filter-options">
                <select @bind="statusFilter" @bind:after="FilterUsers" class="filter-select">
                    <option value="">All Patients</option>
                    <option value="active">Active Only</option>
                    <option value="inactive">Inactive Only</option>
                </select>
            </div>
        </div>

        <!-- Patients List -->
        <div class="users-content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>Loading users...</p>
            </div>
        }
        else if (filteredUsers.Any())
        {
            <div class="users-grid">
                @foreach (var user in filteredUsers.Where(u => u.RoleId == 1))
                {
                    <div class="patient-card @(user.IsActive ? "active" : "inactive")">
                        <div class="patient-header">
                            <div class="patient-info">
                                <h3>@user.FirstName @user.LastName</h3>
                                <p class="patient-email">@user.Email</p>
                                <p class="patient-dob">Born: @user.DateOfBirth.ToString("MMM dd, yyyy")</p>
                                @if (!string.IsNullOrEmpty(user.Gender))
                                {
                                    <p class="patient-gender">@user.Gender</p>
                                }
                            </div>
                            <div class="patient-status">
                                <span class="status-badge @(user.IsActive ? "active" : "inactive")">
                                    @(user.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        
                        <div class="patient-stats">
                            <div class="stat-item">
                                <span class="stat-label">Journal Entries:</span>
                                <span class="stat-value">@user.JournalEntries.Count</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Last Login:</span>
                                <span class="stat-value">
                                    @(user.LastLoginAt?.ToString("MMM dd, yyyy") ?? "Never")
                                </span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Member Since:</span>
                                <span class="stat-value">@user.CreatedAt.ToString("MMM dd, yyyy")</span>
                            </div>
                        </div>

                        <div class="patient-actions">
                            <button @onclick="() => ViewUserDetails(user)" class="action-btn view-btn">
                                üëÅÔ∏è View Details
                            </button>
                            <button @onclick="() => EditUser(user)" class="action-btn edit-btn">
                                ‚úèÔ∏è Edit
                            </button>
                            <button @onclick="() => ViewUserStats(user)" class="action-btn stats-btn">
                                üìä Stats
                            </button>
                            @if (user.IsActive)
                            {
                                <button @onclick="() => DeactivateUser(user)" class="action-btn deactivate-btn">
                                    üö´ Deactivate
                                </button>
                            }
                            else
                            {
                                <button @onclick="() => ReactivateUser(user)" class="action-btn reactivate-btn">
                                    ‚úÖ Reactivate
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üë•</div>
                <h4>No users found</h4>
                <p>@(string.IsNullOrEmpty(searchTerm) ? "Add your first patient to get started!" : "No users match your search criteria.")</p>
            </div>
        }
        </div>
    }
</div>

<!-- Add/Edit Patient Modal -->
@if (showPatientForm)
{
    <div class="modal-overlay" @onclick="ClosePatientForm">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@(editingUser == null ? "Add New Patient" : "Edit Patient")</h3>
                <button @onclick="ClosePatientForm" class="close-btn">‚úï</button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label>First Name *</label>
                    <input @bind="userForm.FirstName" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Last Name *</label>
                    <input @bind="userForm.LastName" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Email *</label>
                    <input @bind="userForm.Email" type="email" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Date of Birth *</label>
                    <input @bind="userForm.DateOfBirth" type="date" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Gender</label>
                    <select @bind="userForm.Gender" class="form-input">
                        <option value="">Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                        <option value="Prefer not to say">Prefer not to say</option>
                    </select>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientForm" class="btn btn-secondary">Cancel</button>
                <button @onclick="SavePatient" disabled="@isSaving" class="btn btn-primary">
                    @(isSaving ? "Saving..." : (editingUser == null ? "Add Patient" : "Update Patient"))
                </button>
            </div>
        </div>
    </div>
}

<!-- Patient Details Modal -->
@if (showPatientDetails && selectedUser != null)
{
    <div class="modal-overlay" @onclick="ClosePatientDetails">
        <div class="modal-content patient-details-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>User Details - @selectedUser.FirstName @selectedUser.LastName</h3>
                <button @onclick="ClosePatientDetails" class="close-btn">‚úï</button>
            </div>
            
            <div class="modal-body">
                <div class="patient-details-grid">
                    <div class="detail-section">
                        <h4>Personal Information</h4>
                        <div class="detail-item">
                            <span class="detail-label">Name:</span>
                            <span class="detail-value">@selectedUser.FirstName @selectedUser.LastName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email:</span>
                            <span class="detail-value">@selectedUser.Email</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Date of Birth:</span>
                            <span class="detail-value">@selectedUser.DateOfBirth.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Gender:</span>
                            <span class="detail-value">@(selectedUser.Gender ?? "Not specified")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Status:</span>
                            <span class="status-badge @(selectedUser.IsActive ? "active" : "inactive")">
                                @(selectedUser.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                    </div>
                    
                    <div class="detail-section">
                        <h4>Account Information</h4>
                        <div class="detail-item">
                            <span class="detail-label">Member Since:</span>
                            <span class="detail-value">@selectedUser.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Login:</span>
                            <span class="detail-value">@(selectedUser.LastLoginAt?.ToString("MMM dd, yyyy 'at' h:mm tt") ?? "Never")</span>
                        </div>
                    </div>
                    
                    <div class="detail-section">
                        <h4>Activity Summary</h4>
                        <div class="detail-item">
                            <span class="detail-label">Journal Entries:</span>
                            <span class="detail-value">@selectedUser.JournalEntries.Count</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Chat Sessions:</span>
                            <span class="detail-value">@selectedUser.ChatSessions.Count</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientDetails" class="btn btn-secondary">Close</button>
                <button @onclick="() => { ClosePatientDetails(); EditUser(selectedUser); }" class="btn btn-primary">Edit User</button>
            </div>
        </div>
    </div>
}

<!-- Patient Stats Modal -->
@if (showPatientStats && selectedUser != null && userStats is not null)
{
    <div class="modal-overlay" @onclick="ClosePatientStats">
        <div class="modal-content patient-stats-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>User Statistics - @selectedUser.FirstName @selectedUser.LastName</h3>
                <button @onclick="ClosePatientStats" class="close-btn">‚úï</button>
            </div>
            
            <div class="modal-body">
                <div class="stats-grid">
                    <div class="stat-card">
                        <h4>Journal Activity</h4>
                        <div class="stat-value">@userStats.TotalJournalEntries</div>
                        <div class="stat-label">Total Entries</div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Recent Activity</h4>
                        <div class="stat-value">@userStats.EntriesLast30Days</div>
                        <div class="stat-label">Last 30 Days</div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Mood Distribution</h4>
                        <div class="mood-stats">
                            @foreach (var mood in userStats.MoodDistribution)
                            {
                                <div class="mood-stat">
                                    <span class="mood-label">@mood.Key:</span>
                                    <span class="mood-count">@mood.Value</span>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Chat Activity</h4>
                        <div class="stat-value">@userStats.TotalChatSessions</div>
                        <div class="stat-label">Chat Sessions</div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientStats" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private List<User> filteredUsers = new();
    private User? selectedUser;
    private UserStats? userStats;
    private bool isLoading = true;
    private bool showPatientForm = false;
    private bool showPatientDetails = false;
    private bool showPatientStats = false;
    private bool isSaving = false;
    private User? editingUser;
    private User userForm = new();
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        try
        {
            isLoading = true;
            
            if (AuthService.CurrentUser?.RoleId == 2) // Doctor - load only assigned users
            {
                users = await Http.GetFromJsonAsync<List<User>>($"api/admin/doctor/{AuthService.CurrentUser.Id}/users") ?? new();
            }
            else if (AuthService.CurrentUser?.RoleId == 3) // Admin - load all users
            {
                users = await Http.GetFromJsonAsync<List<User>>("api/user") ?? new();
            }
            else
            {
                users = new(); // No access
            }
            
            filteredUsers = users.ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load users: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }


    private void SearchPatients()
    {
        FilterUsers();
    }

    private void FilterUsers()
    {
        filteredUsers = users.Where(p => 
            (string.IsNullOrEmpty(searchTerm) || 
             p.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             p.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             p.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(statusFilter) ||
             (statusFilter == "active" && p.IsActive) ||
             (statusFilter == "inactive" && !p.IsActive))
        ).ToList();
    }

    private void ShowAddPatientForm()
    {
        editingUser = null;
        userForm = new User { DateOfBirth = DateTime.Now.AddYears(-25) };
        showPatientForm = true;
    }

    private void EditUser(User user)
    {
        editingUser = user;
        userForm = new User
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            DateOfBirth = user.DateOfBirth,
            Gender = user.Gender,
            IsActive = user.IsActive
        };
        showPatientForm = true;
    }

    private void ClosePatientForm()
    {
        showPatientForm = false;
        editingUser = null;
        userForm = new User();
    }

    private async Task SavePatient()
    {
        if (string.IsNullOrWhiteSpace(userForm.FirstName) || 
            string.IsNullOrWhiteSpace(userForm.LastName) || 
            string.IsNullOrWhiteSpace(userForm.Email))
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Validation", "Please fill in all required fields.");
            return;
        }

        try
        {
            isSaving = true;
            
            if (editingUser == null)
            {
                var result = await Http.PostAsJsonAsync("api/patient", userForm);
                if (result.IsSuccessStatusCode)
                {
                    var newUser = await result.Content.ReadFromJsonAsync<User>();
                    if (newUser != null)
                    {
                        users.Insert(0, newUser);
                        FilterUsers();
                        NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient added successfully!");
                    }
                }
                else
                {
                    var error = await result.Content.ReadAsStringAsync();
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to add patient: " + error);
                }
            }
            else
            {
                var result = await Http.PutAsJsonAsync($"api/patient/{userForm.Id}", userForm);
                if (result.IsSuccessStatusCode)
                {
                    var updatedUser = await result.Content.ReadFromJsonAsync<User>();
                    if (updatedUser != null)
                    {
                        var index = users.FindIndex(p => p.Id == updatedUser.Id);
                        if (index >= 0)
                        {
                            users[index] = updatedUser;
                            FilterUsers();
                        }
                        NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient updated successfully!");
                    }
                }
                else
                {
                    var error = await result.Content.ReadAsStringAsync();
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update patient: " + error);
                }
            }
            
            ClosePatientForm();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save patient: " + ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ViewUserDetails(User user)
    {
        selectedUser = user;
        showPatientDetails = true;
    }

    private void ClosePatientDetails()
    {
        showPatientDetails = false;
        selectedUser = null;
    }

    private async Task ViewUserStats(User user)
    {
        try
        {
            selectedUser = user;
            var response = await Http.GetFromJsonAsync<UserStats>($"api/user/{user.Id}/stats");
            userStats = response;
            showPatientStats = true;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load patient stats: " + ex.Message);
        }
    }

    private void ClosePatientStats()
    {
        showPatientStats = false;
        selectedUser = null;
        userStats = null;
    }

    private async Task DeactivateUser(User user)
    {
        try
        {
            var result = await Http.DeleteAsync($"api/user/{user.Id}");
            if (result.IsSuccessStatusCode)
            {
                user.IsActive = false;
                FilterUsers();
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient deactivated successfully!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to deactivate patient.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to deactivate patient: " + ex.Message);
        }
    }

    private async Task ReactivateUser(User user)
    {
        try
        {
            user.IsActive = true;
            var result = await Http.PutAsJsonAsync($"api/user/{user.Id}", user);
            if (result.IsSuccessStatusCode)
            {
                var updatedUser = await result.Content.ReadFromJsonAsync<User>();
                if (updatedUser != null)
                {
                    var index = users.FindIndex(p => p.Id == updatedUser.Id);
                    if (index >= 0)
                    {
                        users[index] = updatedUser;
                        FilterUsers();
                    }
                }
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient reactivated successfully!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to reactivate patient.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to reactivate patient: " + ex.Message);
        }
    }
}
