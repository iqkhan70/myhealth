@page "/users"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject IAuthService AuthService
@using SM_MentalHealthApp.Shared
@using SM_MentalHealthApp.Client.Services
@using System.Net.Http

<div class="users-page">
    <div class="users-header">
        @if (AuthService.CurrentUser?.RoleId == 2) // Doctor
        {
            <h2>My Patients</h2>
            <p>View and manage your assigned users' mental health journey.</p>
        }
        else if (AuthService.CurrentUser?.RoleId == 3) // Admin
        {
            Console.WriteLine("This is at test page");
            <h2>All Patients</h2>
            <p>Manage all patient records and view their mental health journey.</p>
            <button @onclick="ShowAddPatientForm" class="add-patient-btn">
                ➕ Add New Patient
            </button>
        }
        else
        {
            <h2>Access Denied</h2>
            <p>You don't have permission to view this page.</p>
        }
    </div>

    @if (AuthService.CurrentUser?.RoleId == 2 || AuthService.CurrentUser?.RoleId == 3) // Doctor or Admin
    {
        <!-- Custom Filters -->
        <div class="custom-filters">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Filter by Status:</label>
                    <RadzenDropDown Data="@statusOptions"
                                   ValueProperty="Value"
                                   TextProperty="Text"
                                   @bind-Value="selectedStatusFilter"
                                   Placeholder="All Statuses"
                                   Style="width: 100%" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Filter by Journal Entries:</label>
                    <RadzenDropDown Data="@journalFilterOptions"
                                   ValueProperty="Value"
                                   TextProperty="Text"
                                   @bind-Value="selectedJournalFilter"
                                   Placeholder="All Patients"
                                   Style="width: 100%" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div>
                        <RadzenButton Text="Clear Filters" 
                                     ButtonStyle="ButtonStyle.Light" 
                                     Click="@ClearFilters"
                                     Style="width: 100%" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Grid Info -->
        <div class="grid-info">
            <small class="text-muted">
                <i class="fas fa-info-circle"></i>
                Use the filter row below each column header for basic filtering, or use the custom filters above for status and journal entries.
            </small>
        </div>

        <!-- Patients Grid -->
        <div class="users-content">
            @if (isLoading)
            {
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Loading users...</p>
                </div>
            }
            else
            {
                <RadzenDataGrid Data="@GetFilteredUsers()" 
                               TItem="User" 
                               AllowPaging="true" 
                               PageSize="15"
                               AllowSorting="true" 
                               FilterMode="FilterMode.Advanced" 
                               ShowPagingSummary="true"
                               EmptyText="No patients found"
                               AllowFiltering="true"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               ShowFilterRow="true"
                               ShowFilterRowButtons="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="User" Property="FirstName" Title="Name" Width="200px" Filterable="true">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    <div>
                                        <strong>@(user.FirstName ?? "") @(user.LastName ?? "")</strong>
                                        <br />
                                        <small class="text-muted">@(user.Email ?? "")</small>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted">Invalid user data</div>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="DateOfBirth" Title="Date of Birth" Width="120px" Filterable="true">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    @user.DateOfBirth.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="Gender" Title="Gender" Width="100px" Filterable="true">
                            <Template Context="user">
                                @if (user != null && !string.IsNullOrEmpty(user.Gender))
                                {
                                    <span class="badge badge-info">@user.Gender</span>
                                }
                                else
                                {
                                    <span class="text-muted">Not specified</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="IsActive" Title="Status" Width="100px" Filterable="false">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    <span class="status-badge @(user.IsActive ? "active" : "inactive")">
                                        @(user.IsActive ? "Active" : "Inactive")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="JournalEntries" Title="Journal Entries" Width="120px" Filterable="false" Sortable="false">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    <span class="badge badge-primary">@user.JournalEntries.Count</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="LastLoginAt" Title="Last Login" Width="120px" Filterable="true">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    @(user.LastLoginAt?.ToString("MMM dd, yyyy") ?? "Never")
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="CreatedAt" Title="Member Since" Width="120px" Filterable="true">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    @user.CreatedAt.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="User" Property="Actions" Title="Actions" Width="250px" Sortable="false" Filterable="false">
                            <Template Context="user">
                                @if (user != null)
                                {
                                    <div class="action-buttons">
                                    <RadzenButton Icon="visibility" 
                                                ButtonStyle="ButtonStyle.Info" 
                                                ButtonType="ButtonType.Button" 
                                                Size="ButtonSize.Small"
                                                Click="@(() => ViewUserDetails(user))"
                                                Title="View Details" />
                                    
                                    <RadzenButton Icon="edit" 
                                                ButtonStyle="ButtonStyle.Success" 
                                                ButtonType="ButtonType.Button" 
                                                Size="ButtonSize.Small"
                                                Click="@(() => EditUser(user))"
                                                Title="Edit Patient" />
                                    
                                    <RadzenButton Icon="analytics" 
                                                ButtonStyle="ButtonStyle.Primary" 
                                                ButtonType="ButtonType.Button" 
                                                Size="ButtonSize.Small"
                                                Click="@(() => ViewUserStats(user))"
                                                Title="View Stats" />
                                    
                                    @if (AuthService.CurrentUser?.RoleId == 2) // Doctor - show assignment controls
                                    {
                                        <RadzenButton Icon="person_add" 
                                                    ButtonStyle="ButtonStyle.Warning" 
                                                    ButtonType="ButtonType.Button" 
                                                    Size="ButtonSize.Small"
                                                    Click="@(() => ShowAssignPatientModal(user))"
                                                    Title="Assign to Another Doctor" />
                                        
                                        <button class="btn btn-danger btn-sm" 
                                                @onclick="@(() => ShowUnassignConfirmation(user))"
                                                title="Unassign from Me">
                                            <i class="fas fa-user-minus"></i>
                                        </button>
                                    }
                                    
                                    @if (AuthService.CurrentUser?.RoleId == 3) // Admin - show admin controls
                                    {
                                        @if (user.IsActive)
                                        {
                                            <RadzenButton Icon="block" 
                                                        ButtonStyle="ButtonStyle.Danger" 
                                                        ButtonType="ButtonType.Button" 
                                                        Size="ButtonSize.Small"
                                                        Click="@(() => DeactivateUser(user))"
                                                        Title="Deactivate" />
                                        }
                                        else
                                        {
                                            <RadzenButton Icon="check" 
                                                        ButtonStyle="ButtonStyle.Success" 
                                                        ButtonType="ButtonType.Button" 
                                                        Size="ButtonSize.Small"
                                                        Click="@(() => ReactivateUser(user))"
                                                        Title="Reactivate" />
                                        }
                                    }
                                </div>
                                }
                                else
                                {
                                    <div class="text-muted">Invalid user data</div>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </div>
    }
</div>

<!-- Add/Edit Patient Modal -->
@if (showPatientForm)
{
    <div class="modal-overlay" @onclick="ClosePatientForm">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@(editingUser == null ? "Add New Patient" : "Edit Patient")</h3>
                <button @onclick="ClosePatientForm" class="close-btn">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label>First Name *</label>
                    <input @bind="userForm.FirstName" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Last Name *</label>
                    <input @bind="userForm.LastName" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Email *</label>
                    <input @bind="userForm.Email" type="email" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Date of Birth *</label>
                    <input @bind="userForm.DateOfBirth" type="date" class="form-input" />
                </div>
                
                <div class="form-group">
                    <label>Gender</label>
                    <select @bind="userForm.Gender" class="form-input">
                        <option value="">Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                        <option value="Prefer not to say">Prefer not to say</option>
                    </select>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientForm" class="btn btn-secondary">Cancel</button>
                <button @onclick="SavePatient" disabled="@isSaving" class="btn btn-primary">
                    @(isSaving ? "Saving..." : (editingUser == null ? "Add Patient" : "Update Patient"))
                </button>
            </div>
        </div>
    </div>
}

<!-- Patient Details Modal -->
@if (showPatientDetails && selectedUser != null)
{
    <div class="modal-overlay" @onclick="ClosePatientDetails">
        <div class="modal-content patient-details-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>User Details - @selectedUser.FirstName @selectedUser.LastName</h3>
                <button @onclick="ClosePatientDetails" class="close-btn">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="patient-details-grid">
                    <div class="detail-section">
                        <h4>Personal Information</h4>
                        <div class="detail-item">
                            <span class="detail-label">Name:</span>
                            <span class="detail-value">@selectedUser.FirstName @selectedUser.LastName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email:</span>
                            <span class="detail-value">@selectedUser.Email</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Date of Birth:</span>
                            <span class="detail-value">@selectedUser.DateOfBirth.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Gender:</span>
                            <span class="detail-value">@(selectedUser.Gender ?? "Not specified")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Status:</span>
                            <span class="status-badge @(selectedUser.IsActive ? "active" : "inactive")">
                                @(selectedUser.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                    </div>
                    
                    <div class="detail-section">
                        <h4>Account Information</h4>
                        <div class="detail-item">
                            <span class="detail-label">Member Since:</span>
                            <span class="detail-value">@selectedUser.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Login:</span>
                            <span class="detail-value">@(selectedUser.LastLoginAt?.ToString("MMM dd, yyyy 'at' h:mm tt") ?? "Never")</span>
                        </div>
                    </div>
                    
                    <div class="detail-section">
                        <h4>Activity Summary</h4>
                        <div class="detail-item">
                            <span class="detail-label">Journal Entries:</span>
                            <span class="detail-value">@selectedUser.JournalEntries.Count</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Chat Sessions:</span>
                            <span class="detail-value">@selectedUser.ChatSessions.Count</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientDetails" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>
}

<!-- Patient Stats Modal -->
@if (showPatientStats && selectedUser != null && userStats is not null)
{
    <div class="modal-overlay" @onclick="ClosePatientStats">
        <div class="modal-content patient-stats-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>User Statistics - @selectedUser.FirstName @selectedUser.LastName</h3>
                <button @onclick="ClosePatientStats" class="close-btn">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="stats-grid">
                    <div class="stat-card">
                        <h4>Journal Activity</h4>
                        <div class="stat-value">@userStats.TotalJournalEntries</div>
                        <div class="stat-label">Total Entries</div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Recent Activity</h4>
                        <div class="stat-value">@userStats.EntriesLast30Days</div>
                        <div class="stat-label">Last 30 Days</div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Mood Distribution</h4>
                        <div class="mood-stats">
                            @foreach (var mood in userStats.MoodDistribution)
                            {
                                <div class="mood-stat">
                                    <span class="mood-label">@mood.Key:</span>
                                    <span class="mood-count">@mood.Value</span>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <h4>Chat Activity</h4>
                        <div class="stat-value">@userStats.TotalChatSessions</div>
                        <div class="stat-label">Chat Sessions</div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="ClosePatientStats" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>
}

<!-- Doctor Assignment Modal -->
@if (showAssignModal && selectedUser != null)
{
    <div class="modal-overlay" @onclick="CloseAssignModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Assign Patient to Another Doctor</h3>
                <button @onclick="CloseAssignModal" class="close-btn">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="assignment-info">
                    <p><strong>Patient:</strong> @selectedUser.FirstName @selectedUser.LastName</p>
                    <p><strong>Email:</strong> @selectedUser.Email</p>
                </div>
                
                <div class="form-group">
                    <label>Select Doctor to Assign To:</label>
                    <RadzenDropDown Data="@availableDoctors"
                                   ValueProperty="Id"
                                   TextProperty="FullName"
                                   @bind-Value="selectedDoctorId"
                                   Placeholder="Choose a doctor..."
                                   Style="width: 100%" />
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="CloseAssignModal" class="btn btn-secondary">Cancel</button>
                <button @onclick="AssignPatientToDoctor" disabled="@isAssigning" class="btn btn-primary">
                    @(isAssigning ? "Assigning..." : "Assign Patient")
                </button>
            </div>
        </div>
    </div>
}

<!-- Unassign Confirmation Modal -->
@if (showUnassignConfirmation && selectedUser != null)
{
    <div class="modal-overlay" @onclick="CloseUnassignConfirmation" style="display: block !important; z-index: 9999 !important;">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>⚠️ Confirm Unassignment</h3>
                <button @onclick="CloseUnassignConfirmation" class="close-btn">✕</button>
            </div>
            
            <div class="modal-body">
                <div style="background: red; color: white; padding: 10px; margin-bottom: 10px;">
                    DEBUG: Modal is showing! showUnassignConfirmation = @showUnassignConfirmation, selectedUser = @(selectedUser?.FirstName ?? "null")
                </div>
                <div class="confirmation-warning">
                    <div class="warning-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="warning-content">
                        <h4>Are you sure you want to unassign this patient?</h4>
                        <div class="patient-info">
                            <p><strong>Patient:</strong> @selectedUser.FirstName @selectedUser.LastName</p>
                            <p><strong>Email:</strong> @selectedUser.Email</p>
                        </div>
                        <div class="warning-message">
                            <p><strong>Important:</strong> Once unassigned, you will no longer have access to this patient's records. 
                            You will need to contact an administrator to reassign the patient or ask another doctor to assign them to you.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button @onclick="CloseUnassignConfirmation" class="btn btn-secondary">Cancel</button>
                <button @onclick="ConfirmUnassignPatient" disabled="@isUnassigning" class="btn btn-danger">
                    @(isUnassigning ? "Unassigning..." : "Yes, Unassign Patient")
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private User? selectedUser;
    private UserStats? userStats;
    private bool isLoading = true;
    private bool showPatientForm = false;
    private bool showPatientDetails = false;
    private bool showPatientStats = false;
    private bool showAssignModal = false;
    private bool showUnassignConfirmation = false;
    private bool isSaving = false;
    private bool isAssigning = false;
    private bool isUnassigning = false;
    private User? editingUser;
    private User userForm = new();
    private List<User> availableDoctors = new();
    private int selectedDoctorId = 0;
    
    // Custom filter variables
    private bool? selectedStatusFilter = null;
    private string? selectedJournalFilter = null;
    
    private readonly List<object> statusOptions = new()
    {
        new { Value = (bool?)null, Text = "All Statuses" },
        new { Value = (bool?)true, Text = "Active" },
        new { Value = (bool?)false, Text = "Inactive" }
    };
    
    private readonly List<object> journalFilterOptions = new()
    {
        new { Value = (string?)null, Text = "All Patients" },
        new { Value = "0", Text = "No Journal Entries" },
        new { Value = "1-5", Text = "1-5 Entries" },
        new { Value = "6-10", Text = "6-10 Entries" },
        new { Value = "10+", Text = "10+ Entries" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        try
        {
            isLoading = true;
            
            if (AuthService.CurrentUser?.RoleId == 2) // Doctor - load only assigned users
            {
                users = await Http.GetFromJsonAsync<List<User>>("api/doctor/my-patients") ?? new();
            }
            else if (AuthService.CurrentUser?.RoleId == 3) // Admin - load all users
            {
                users = await Http.GetFromJsonAsync<List<User>>("api/user") ?? new();
            }
            else
            {
                users = new(); // No access
            }
            
            // Load journal entry counts for each patient
            await LoadJournalEntryCounts();
            
            // Debug: Check for null users
            var nullUsers = users.Where(u => u == null).Count();
            if (nullUsers > 0)
            {
                Console.WriteLine($"Warning: Found {nullUsers} null users in the list");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load users: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadJournalEntryCounts()
    {
        try
        {
            foreach (var user in users.Where(u => u.RoleId == 1)) // Only for patients
            {
                try
                {
                    var entries = await Http.GetFromJsonAsync<List<JournalEntry>>($"api/journal/user/{user.Id}") ?? new();
                    user.JournalEntries = entries; // Populate the JournalEntries property
                }
                catch (Exception)
                {
                    user.JournalEntries = new(); // Set empty list if error
                }
            }
        }
        catch (Exception)
        {
            // Log error but don't show to user
        }
    }

    private List<User> GetFilteredUsers()
    {
        var filtered = users.Where(u => u != null && u.RoleId == 1).AsEnumerable();

        // Apply status filter
        if (selectedStatusFilter.HasValue)
        {
            filtered = filtered.Where(u => u != null && u.IsActive == selectedStatusFilter.Value);
        }

        // Apply journal entries filter
        if (!string.IsNullOrEmpty(selectedJournalFilter))
        {
            filtered = selectedJournalFilter switch
            {
                "0" => filtered.Where(u => u.JournalEntries.Count == 0),
                "1-5" => filtered.Where(u => u.JournalEntries.Count >= 1 && u.JournalEntries.Count <= 5),
                "6-10" => filtered.Where(u => u.JournalEntries.Count >= 6 && u.JournalEntries.Count <= 10),
                "10+" => filtered.Where(u => u.JournalEntries.Count > 10),
                _ => filtered
            };
        }

        return filtered.ToList();
    }

    private void ClearFilters()
    {
        selectedStatusFilter = null;
        selectedJournalFilter = null;
        StateHasChanged();
    }



    private void ShowAddPatientForm()
    {
        editingUser = null;
        userForm = new User { DateOfBirth = DateTime.Now.AddYears(-25) };
        showPatientForm = true;
    }

    private void EditUser(User user)
    {
        if (user == null) return;
        
        editingUser = user;
        userForm = new User
        {
            Id = user.Id,
            FirstName = user.FirstName ?? string.Empty,
            LastName = user.LastName ?? string.Empty,
            Email = user.Email ?? string.Empty,
            DateOfBirth = user.DateOfBirth,
            Gender = user.Gender ?? string.Empty,
            IsActive = user.IsActive
        };
        showPatientForm = true;
    }

    private void ClosePatientForm()
    {
        showPatientForm = false;
        editingUser = null;
        userForm = new User();
    }

    private async Task SavePatient()
    {
        if (string.IsNullOrWhiteSpace(userForm.FirstName) || 
            string.IsNullOrWhiteSpace(userForm.LastName) || 
            string.IsNullOrWhiteSpace(userForm.Email))
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Validation", "Please fill in all required fields.");
            return;
        }

        try
        {
            isSaving = true;
            
            if (editingUser == null)
            {
                var result = await Http.PostAsJsonAsync("api/user", userForm);
                if (result.IsSuccessStatusCode)
                {
                    var newUser = await result.Content.ReadFromJsonAsync<User>();
                    if (newUser != null)
                    {
                        users.Insert(0, newUser);
                        NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient added successfully!");
                    }
                }
                else
                {
                    var error = await result.Content.ReadAsStringAsync();
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to add patient: " + error);
                }
            }
            else
            {
                var result = await Http.PutAsJsonAsync($"api/user/{userForm.Id}", userForm);
                if (result.IsSuccessStatusCode)
                {
                    var updatedUser = await result.Content.ReadFromJsonAsync<User>();
                    if (updatedUser != null)
                    {
                        var index = users.FindIndex(p => p.Id == updatedUser.Id);
                        if (index >= 0)
                        {
                            users[index] = updatedUser;
                        }
                        NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient updated successfully!");
                    }
                }
                else
                {
                    var error = await result.Content.ReadAsStringAsync();
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update patient: " + error);
                }
            }
            
            ClosePatientForm();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save patient: " + ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ViewUserDetails(User user)
    {
        if (user == null) return;
        
        selectedUser = user;
        showPatientDetails = true;
    }

    private void ClosePatientDetails()
    {
        showPatientDetails = false;
        selectedUser = null;
    }

    private async Task ViewUserStats(User user)
    {
        if (user == null) return;
        
        try
        {
            selectedUser = user;
            var response = await Http.GetFromJsonAsync<UserStats>($"api/user/{user.Id}/stats");
            userStats = response;
            showPatientStats = true;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load patient stats: " + ex.Message);
        }
    }

    private void ClosePatientStats()
    {
        showPatientStats = false;
        selectedUser = null;
        userStats = null;
    }

    private async Task DeactivateUser(User user)
    {
        if (user == null) return;
        
        try
        {
            var result = await Http.DeleteAsync($"api/user/{user.Id}");
            if (result.IsSuccessStatusCode)
            {
                user.IsActive = false;
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient deactivated successfully!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to deactivate patient.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to deactivate patient: " + ex.Message);
        }
    }

    private async Task ReactivateUser(User user)
    {
        if (user == null) return;
        
        try
        {
            user.IsActive = true;
            var result = await Http.PutAsJsonAsync($"api/user/{user.Id}", user);
            if (result.IsSuccessStatusCode)
            {
                var updatedUser = await result.Content.ReadFromJsonAsync<User>();
                if (updatedUser != null)
                {
                    var index = users.FindIndex(p => p.Id == updatedUser.Id);
                    if (index >= 0)
                    {
                        users[index] = updatedUser;
                    }
                }
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient reactivated successfully!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to reactivate patient.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to reactivate patient: " + ex.Message);
        }
    }

    private async Task ShowAssignPatientModal(User user)
    {
        if (user == null) return;
        
        try
        {
            selectedUser = user;
            selectedDoctorId = 0;
            
            // Load available doctors
            availableDoctors = await Http.GetFromJsonAsync<List<User>>("api/doctor/doctors") ?? new();
            
            // Remove current doctor from the list
            if (AuthService.CurrentUser?.Id != null)
            {
                availableDoctors = availableDoctors.Where(d => d.Id != AuthService.CurrentUser.Id).ToList();
            }
            
            showAssignModal = true;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load doctors: " + ex.Message);
        }
    }

    private void CloseAssignModal()
    {
        showAssignModal = false;
        selectedUser = null;
        selectedDoctorId = 0;
        availableDoctors.Clear();
    }

    private async Task AssignPatientToDoctor()
    {
        if (selectedUser == null || selectedDoctorId == 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Validation", "Please select a doctor to assign the patient to.");
            return;
        }

        try
        {
            isAssigning = true;
            
            var request = new DoctorAssignPatientRequest
            {
                PatientId = selectedUser.Id,
                ToDoctorId = selectedDoctorId
            };

            var response = await Http.PostAsJsonAsync("api/doctor/assign-patient", request);

            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient assigned to doctor successfully!");
                CloseAssignModal();
                await LoadPatients(); // Reload to refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to assign patient: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error assigning patient: {ex.Message}");
        }
        finally
        {
            isAssigning = false;
        }
    }

    private void ShowUnassignConfirmation(User user)
    {
        if (user == null) return;
        
        Console.WriteLine($"ShowUnassignConfirmation called for user: {user.FirstName} {user.LastName}");
        selectedUser = user;
        showUnassignConfirmation = true;
        Console.WriteLine($"showUnassignConfirmation set to: {showUnassignConfirmation}");
        
        // Add a simple test to see if this method is being called
        NotificationService.Notify(NotificationSeverity.Info, "Debug", $"ShowUnassignConfirmation called for {user.FirstName}");
        
        StateHasChanged();
    }

    private void CloseUnassignConfirmation()
    {
        showUnassignConfirmation = false;
        selectedUser = null;
    }

    private async Task ConfirmUnassignPatient()
    {
        if (selectedUser == null)
        {
            return;
        }

        try
        {
            isUnassigning = true;
            
            var request = new DoctorUnassignPatientRequest
            {
                PatientId = selectedUser.Id
            };

            var response = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Delete, "api/doctor/unassign-patient")
            {
                Content = JsonContent.Create(request)
            });

            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Patient unassigned from you successfully!");
                CloseUnassignConfirmation();
                await LoadPatients(); // Reload to refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to unassign patient: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error unassigning patient: {ex.Message}");
        }
        finally
        {
            isUnassigning = false;
        }
    }
}

<style>
    .action-buttons {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
    }

    .action-buttons .rz-button {
        margin: 2px;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-badge.active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-badge.inactive {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge.badge-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .badge.badge-primary {
        background-color: #cce5ff;
        color: #004085;
    }

    .text-muted {
        color: #6c757d;
        font-size: 12px;
    }

    .grid-info {
        margin-bottom: 15px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
        border-left: 4px solid #007bff;
    }

    .grid-info i {
        margin-right: 5px;
        color: #007bff;
    }

    .custom-filters {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
        border: 1px solid #dee2e6;
    }

    .custom-filters .form-label {
        font-weight: 500;
        color: #333;
        margin-bottom: 5px;
    }

    .custom-filters .row {
        margin: 0;
    }

    .custom-filters .col-md-3 {
        padding: 0 10px;
    }

    .assignment-info {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        border-left: 4px solid #007bff;
    }

    .assignment-info p {
        margin: 5px 0;
        color: #333;
    }

    .assignment-info strong {
        color: #007bff;
    }

    .confirmation-warning {
        display: flex;
        align-items: flex-start;
        gap: 15px;
        padding: 20px;
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .warning-icon {
        font-size: 24px;
        color: #f39c12;
        margin-top: 5px;
    }

    .warning-content h4 {
        color: #856404;
        margin-bottom: 15px;
        font-size: 18px;
    }

    .patient-info {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
        border-left: 4px solid #007bff;
    }

    .patient-info p {
        margin: 5px 0;
        color: #333;
    }

    .patient-info strong {
        color: #007bff;
    }

    .warning-message {
        background-color: #f8d7da;
        padding: 15px;
        border-radius: 5px;
        border-left: 4px solid #dc3545;
    }

    .warning-message p {
        margin: 0;
        color: #721c24;
        font-size: 14px;
        line-height: 1.5;
    }

    .warning-message strong {
        color: #dc3545;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }
</style>
