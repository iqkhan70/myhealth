@page "/admin"
@using SM_MentalHealthApp.Shared
@using SM_MentalHealthApp.Client.Services
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Admin Panel</PageTitle>

<div class="admin-container">
    <div class="admin-header">
        <h1>Admin Panel</h1>
        <p>Manage patient-doctor assignments</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading...</p>
        </div>
    }
    else
    {
        <div class="admin-content">
            <!-- Assignment Management -->
            <div class="assignment-section">
                <h2>Patient-Doctor Assignments</h2>
                
                <div class="assignment-controls">
                    <div class="form-group">
                        <label>Select Patient:</label>
                        <select @bind="selectedPatientId" class="form-control">
                            <option value="0">Choose a patient...</option>
                            @foreach (var patient in patients)
                            {
                                <option value="@patient.Id">@patient.FirstName @patient.LastName (@patient.Email)</option>
                            }
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Select Doctor:</label>
                        <select @bind="selectedDoctorId" class="form-control">
                            <option value="0">Choose a doctor...</option>
                            @foreach (var doctor in doctors)
                            {
                                <option value="@doctor.Id">@doctor.FirstName @doctor.LastName (@doctor.Email)</option>
                            }
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <button class="btn btn-primary" @onclick="AssignPatient" disabled="@(selectedPatientId == 0 || selectedDoctorId == 0)">
                            Assign Patient to Doctor
                        </button>
                        <button class="btn btn-danger" @onclick="UnassignPatient" disabled="@(selectedPatientId == 0 || selectedDoctorId == 0)">
                            Unassign Patient from Doctor
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert @(isError ? "alert-danger" : "alert-success")">
                        @message
                    </div>
                }
            </div>

            <!-- Current Assignments -->
            <div class="assignments-section">
                <h2>Current Assignments</h2>
                <div class="assignments-grid">
                    @foreach (var assignment in assignments)
                    {
                        <div class="assignment-card">
                            <div class="assignment-info">
                                <strong>@assignment.Patient?.FirstName @assignment.Patient?.LastName</strong>
                                <span class="assignment-arrow">â†’</span>
                                <strong>@assignment.Doctor?.FirstName @assignment.Doctor?.LastName</strong>
                            </div>
                            <div class="assignment-details">
                                <small>Assigned: @assignment.AssignedAt.ToString("MMM dd, yyyy")</small>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Doctor-Patient Overview -->
            <div class="overview-section">
                <h2>Doctor-Patient Overview</h2>
                <div class="overview-grid">
                    @foreach (var doctor in doctors)
                    {
                        <div class="doctor-card">
                            <h3>@doctor.FirstName @doctor.LastName</h3>
                            <p class="doctor-specialization">@doctor.Specialization</p>
                            <div class="patient-list">
                                <h4>Assigned Patients:</h4>
                                @{
                                    var doctorPatients = assignments.Where(a => a.DoctorId == doctor.Id).ToList();
                                }
                                @if (doctorPatients.Any())
                                {
                                    <ul>
                                        @foreach (var assignment in doctorPatients)
                                        {
                                            <li>@assignment.Patient?.FirstName @assignment.Patient?.LastName</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="no-patients">No patients assigned</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Patient> patients = new();
    private List<Doctor> doctors = new();
    private List<DoctorPatient> assignments = new();
    private int selectedPatientId = 0;
    private int selectedDoctorId = 0;
    private bool isLoading = true;
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load patients
            var patientsResponse = await Http.GetFromJsonAsync<List<Patient>>("api/admin/patients");
            patients = patientsResponse ?? new();

            // Load doctors
            var doctorsResponse = await Http.GetFromJsonAsync<List<Doctor>>("api/admin/doctors");
            doctors = doctorsResponse ?? new();

            // Load assignments
            var assignmentsResponse = await Http.GetFromJsonAsync<List<DoctorPatient>>("api/admin/assignments");
            assignments = assignmentsResponse ?? new();

            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            message = $"Error loading data: {ex.Message}";
            isError = true;
        }
    }

    private async Task AssignPatient()
    {
        try
        {
            var request = new AssignPatientRequest
            {
                PatientId = selectedPatientId,
                DoctorId = selectedDoctorId
            };

            var response = await Http.PostAsJsonAsync("api/admin/assign", request);
            
            if (response.IsSuccessStatusCode)
            {
                message = "Patient assigned to doctor successfully!";
                isError = false;
                await LoadData(); // Reload data to show updated assignments
                selectedPatientId = 0;
                selectedDoctorId = 0;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Failed to assign patient: {errorContent}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error assigning patient: {ex.Message}";
            isError = true;
        }
    }

    private async Task UnassignPatient()
    {
        try
        {
            var request = new UnassignPatientRequest
            {
                PatientId = selectedPatientId,
                DoctorId = selectedDoctorId
            };

            var response = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Delete, "api/admin/unassign")
            {
                Content = JsonContent.Create(request)
            });
            
            if (response.IsSuccessStatusCode)
            {
                message = "Patient unassigned from doctor successfully!";
                isError = false;
                await LoadData(); // Reload data to show updated assignments
                selectedPatientId = 0;
                selectedDoctorId = 0;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Failed to unassign patient: {errorContent}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error unassigning patient: {ex.Message}";
            isError = true;
        }
    }

    public class AssignPatientRequest
    {
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
    }

    public class UnassignPatientRequest
    {
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
    }
}
