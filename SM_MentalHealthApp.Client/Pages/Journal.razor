@page "/journal"
@using SM_MentalHealthApp.Client.Services
@using SM_MentalHealthApp.Shared
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject NotificationService NotificationService
@inject IAuthService AuthService

<div class="journal-page">
    <!-- Journal Entry Form -->
    <div class="journal-form-card">
        <div class="form-header">
            <h2>Mental Health Journal</h2>
            <p>Share your thoughts and feelings. Our AI companion will provide empathetic responses and mood analysis.
            </p>
        </div>

        <div class="form-content">
            @if (AuthService.CurrentUser?.RoleId == 2) // Doctor
            {
                <div class="patient-selection">
                    <label style="white-space: nowrap; margin-bottom: 8px; display: block;">
                        üë§ Select Patient: 
                        @if (selectedPatientId == 0)
                        {
                            <span class="required-indicator">*</span>
                        }
                    </label>
                    <RadzenDropDown @bind-Value="selectedPatientId" 
                                   Data="@assignedPatients" 
                                   ValueProperty="Id" 
                                   TextProperty="FullName"
                                   Placeholder="Search patients..." 
                                   AllowClear="true"
                                   AllowFiltering="true"
                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   Change="@OnPatientSelected"
                                   Style="width: 100%; min-width: 350px; max-width: 500px;"
                                   TValue="int"
                                   class="@GetPatientSelectClass()">
                        <Template Context="patient">
                            <div style="padding: 6px 8px; line-height: 1.2;">
                                <div style="font-weight: 500; font-size: 14px; margin-bottom: 2px;">@patient.FirstName @patient.LastName</div>
                                <div style="font-size: 12px; color: #666; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@patient.Email ‚Ä¢ ID: @patient.Id</div>
                            </div>
                        </Template>
                    </RadzenDropDown>
                </div>
            }

            <textarea @bind="entryText" @bind:event="oninput"
                placeholder="@(AuthService.CurrentUser?.RoleId == 2 ? "Enter journal entry for the selected patient..." : "How are you feeling today? What's on your mind?")" 
                rows="5"
                class="journal-textarea"></textarea>

            <button @onclick="SaveEntry" 
                   disabled="@(string.IsNullOrWhiteSpace(entryText) || (AuthService.CurrentUser?.RoleId == 2 && selectedPatientId == 0))" 
                   class="save-button @(string.IsNullOrWhiteSpace(entryText) ? "disabled" : (AuthService.CurrentUser?.RoleId == 2 && selectedPatientId == 0 ? "disabled-patient" : "enabled"))">
                üíæ Save Entry
            </button>
            
            @if (AuthService.CurrentUser?.RoleId == 2 && selectedPatientId == 0 && !string.IsNullOrWhiteSpace(entryText))
            {
                <div class="validation-message error">
                    <i class="fas fa-exclamation-triangle"></i>
                    Please select a patient before saving the journal entry.
                </div>
            }
        </div>
    </div>

    <!-- Journal Entries List -->
    <div class="entries-section">
        <h3>@(AuthService.CurrentUser?.RoleId == 2 ? "Patient Journal Entries" : "Your Journal Entries")</h3>

        @if (entries.Any())
        {
            <div class="entries-list">
                @foreach (var entry in entries)
                {
                    <div class="entry-card" style="border-left: 4px solid @GetMoodColor(entry.Mood);">
                        <div class="entry-header">
                            <span class="entry-date">@entry.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                            <div class="entry-meta">
                                @if (entry.EnteredByUserId.HasValue)
                                {
                                    <span class="entry-entered-by">
                                        <i class="fas fa-user-md"></i>
                                        @GetDoctorName(entry.EnteredByUserId)
                                    </span>
                                }
                                else
                                {
                                    <span class="entry-entered-by self">
                                        <i class="fas fa-user"></i>
                                        Self Entry
                                    </span>
                                }
                                <span class="mood-badge @GetMoodClass(entry.Mood)">@(entry.Mood ?? "Unknown")</span>
                            </div>
                        </div>

                        <div class="entry-content">
                            <p class="entry-text">@entry.Text</p>

                            @if (!string.IsNullOrEmpty(entry.AIResponse))
                            {
                                <div class="ai-response">
                                    <div class="ai-header">
                                        <span class="ai-icon">ü§ñ</span>
                                        <span class="ai-label">AI Response</span>
                                    </div>
                                    <p class="ai-text">@entry.AIResponse</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                @if (AuthService.CurrentUser?.RoleId == 2)
                {
                    <h4>@(selectedPatientId == 0 ? "Select a patient to view their journal entries" : "No journal entries for this patient yet")</h4>
                    <p>@(selectedPatientId == 0 ? "Choose a patient from the dropdown above to see their journal entries, or create a new entry for them." : "This patient hasn't written any journal entries yet. You can create one for them above.")</p>
                }
                else
                {
                    <h4>No journal entries yet</h4>
                    <p>Start by writing your first entry above!</p>
                }
            </div>
        }
    </div>
</div>

@code {
    private string entryText = string.Empty;
    private List<JournalEntry> entries = new();
    private List<User> assignedPatients = new();
    private int selectedPatientId = 0;
    private Dictionary<int, User> doctorCache = new(); // Cache for doctor information

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser?.RoleId == 2) // Doctor
        {
            await LoadAssignedPatients();
        }
        await LoadEntries();
    }

    private async Task LoadAssignedPatients()
    {
        try
        {
            assignedPatients = await Http.GetFromJsonAsync<List<User>>("api/doctor/my-patients") ?? new();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load assigned patients: " + ex.Message);
        }
    }

    private async Task LoadEntries()
    {
        try
        {
            if (AuthService.CurrentUser != null)
            {
                // For doctors, load entries for selected patient; for patients, load their own entries
                var targetUserId = AuthService.CurrentUser.RoleId == 2 ? selectedPatientId : AuthService.CurrentUser.Id;
                if (targetUserId > 0)
                {
                    entries = await Http.GetFromJsonAsync<List<JournalEntry>>($"api/journal/user/{targetUserId}") ?? new();
                    
                    // Load doctor information for entries that were entered by doctors
                    await LoadDoctorInformation();
                }
                else
                {
                    entries = new();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load journal entries: " + ex.Message);
        }
    }

    private async Task LoadDoctorInformation()
    {
        try
        {
            // Get unique doctor IDs from entries
            var doctorIds = entries
                .Where(e => e.EnteredByUserId.HasValue)
                .Select(e => e.EnteredByUserId.Value)
                .Distinct()
                .Where(id => !doctorCache.ContainsKey(id))
                .ToList();

            // Load doctor information for each unique doctor ID
            foreach (var doctorId in doctorIds)
            {
                try
                {
                    var doctor = await Http.GetFromJsonAsync<User>($"api/user/{doctorId}");
                    if (doctor != null)
                    {
                        doctorCache[doctorId] = doctor;
                    }
                }
                catch (Exception)
                {
                    // If we can't load the doctor info, we'll show a fallback
                    doctorCache[doctorId] = new User 
                    { 
                        Id = doctorId, 
                        FirstName = "Unknown", 
                        LastName = "Doctor" 
                    };
                }
            }
        }
        catch (Exception)
        {
            // Silently handle errors - we'll show fallback text
        }
    }

    private async Task SaveEntry()
    {
        if (string.IsNullOrWhiteSpace(entryText))
            return;

        // For doctors, ensure a patient is selected
        if (AuthService.CurrentUser?.RoleId == 2 && selectedPatientId == 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Patient Required", "Please select a patient from the dropdown above before saving the journal entry.");
            return;
        }

        try
        {
            if (AuthService.CurrentUser == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "You must be logged in to save journal entries.");
                return;
            }

            var newEntry = new JournalEntry { Text = entryText };
            HttpResponseMessage result;

            if (AuthService.CurrentUser.RoleId == 2) // Doctor
            {
                // Doctor entering for patient
                result = await Http.PostAsJsonAsync($"api/journal/doctor/{AuthService.CurrentUser.Id}/patient/{selectedPatientId}", newEntry);
            }
            else
            {
                // Patient entering for themselves
                result = await Http.PostAsJsonAsync($"api/journal/user/{AuthService.CurrentUser.Id}", newEntry);
            }

            if (result.IsSuccessStatusCode)
            {
                var saved = await result.Content.ReadFromJsonAsync<JournalEntry>();
                if (saved != null)
                {
                    entries.Insert(0, saved);
                    entryText = string.Empty;
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "Journal entry saved successfully!");
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save journal entry.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save journal entry: " + ex.Message);
        }
    }

    private async Task OnPatientSelected(object value)
    {
        selectedPatientId = value != null ? (int)value : 0;
        await LoadEntries();
    }

    private string GetPatientSelectClass()
    {
        var baseClass = "patient-select-radzen";
        if (selectedPatientId == 0 && !string.IsNullOrWhiteSpace(entryText))
        {
            return $"{baseClass} validation-error";
        }
        return baseClass;
    }

    private string GetDoctorName(int? doctorId)
    {
        if (!doctorId.HasValue) return "Unknown Doctor";
        
        if (doctorCache.ContainsKey(doctorId.Value))
        {
            var doctor = doctorCache[doctorId.Value];
            return $"Dr. {doctor.FirstName} {doctor.LastName}";
        }
        
        return "Entered by Doctor";
    }

    private string GetMoodColor(string mood)
    {
        return mood switch
        {
            "Happy" => "#28a745",
            "Sad" => "#dc3545",
            "Anxious" => "#ffc107",
            "Distressed" => "#fd7e14", // Orange for distress
            "Crisis" => "#dc3545", // Red for crisis
            "Neutral" => "#6c757d",
            _ => "#6c757d"
        };
    }

    private string GetMoodClass(string mood)
    {
        return mood switch
        {
            "Happy" => "mood-happy",
            "Sad" => "mood-sad",
            "Anxious" => "mood-anxious",
            "Distressed" => "mood-distressed",
            "Crisis" => "mood-crisis",
            "Neutral" => "mood-neutral",
            _ => "mood-neutral"
        };
    }
}
