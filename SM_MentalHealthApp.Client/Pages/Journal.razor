@page "/journal"
@using SM_MentalHealthApp.Client.Services
@using SM_MentalHealthApp.Shared
@inject HttpClient Http
@inject NotificationService NotificationService
@inject IAuthService AuthService

<div class="journal-page">
    <!-- Journal Entry Form -->
    <div class="journal-form-card">
        <div class="form-header">
            <h2>Mental Health Journal</h2>
            <p>Share your thoughts and feelings. Our AI companion will provide empathetic responses and mood analysis.</p>
        </div>
        
        <div class="form-content">
            <textarea @bind="entryText" 
                     placeholder="How are you feeling today? What's on your mind?" 
                     rows="5" 
                     class="journal-textarea"></textarea>
            
            <button @onclick="SaveEntry" 
                   disabled="@(string.IsNullOrWhiteSpace(entryText))"
                   class="save-button">
                üíæ Save Entry
            </button>
        </div>
    </div>

    <!-- Journal Entries List -->
    <div class="entries-section">
        <h3>Your Journal Entries</h3>
        
        @if (entries.Any())
        {
            <div class="entries-list">
                @foreach (var entry in entries)
                {
                    <div class="entry-card" style="border-left: 4px solid @GetMoodColor(entry.Mood);">
                        <div class="entry-header">
                            <span class="entry-date">@entry.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                            <span class="mood-badge @GetMoodClass(entry.Mood)">@(entry.Mood ?? "Unknown")</span>
                        </div>
                        
                        <div class="entry-content">
                            <p class="entry-text">@entry.Text</p>
                            
                            @if (!string.IsNullOrEmpty(entry.AIResponse))
                            {
                                <div class="ai-response">
                                    <div class="ai-header">
                                        <span class="ai-icon">ü§ñ</span>
                                        <span class="ai-label">AI Response</span>
                                    </div>
                                    <p class="ai-text">@entry.AIResponse</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h4>No journal entries yet</h4>
                <p>Start by writing your first entry above!</p>
            </div>
        }
    </div>
</div>

@code {
    private string entryText = string.Empty;
    private List<JournalEntry> entries = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEntries();
    }

    private async Task LoadEntries()
    {
        try
        {
            if (AuthService.CurrentUser != null)
            {
                // Load entries for the authenticated user
                entries = await Http.GetFromJsonAsync<List<JournalEntry>>($"api/journal/patient/{AuthService.CurrentUser.Id}") ?? new();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load journal entries: " + ex.Message);
        }
    }

    private async Task SaveEntry()
    {
        if (string.IsNullOrWhiteSpace(entryText))
            return;

        try
        {
            if (AuthService.CurrentUser == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "You must be logged in to save journal entries.");
                return;
            }

            var newEntry = new JournalEntry { Text = entryText };
            // Save entry for the authenticated user
            var result = await Http.PostAsJsonAsync($"api/journal/patient/{AuthService.CurrentUser.Id}", newEntry);

            if (result.IsSuccessStatusCode)
            {
                var saved = await result.Content.ReadFromJsonAsync<JournalEntry>();
                if (saved != null)
                {
                    entries.Insert(0, saved);
                    entryText = string.Empty;
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "Journal entry saved successfully!");
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save journal entry.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save journal entry: " + ex.Message);
        }
    }

    private string GetMoodColor(string mood)
    {
        return mood switch
        {
            "Happy" => "#28a745",
            "Sad" => "#dc3545",
            "Anxious" => "#ffc107",
            "Neutral" => "#6c757d",
            _ => "#6c757d"
        };
    }

    private string GetMoodClass(string mood)
    {
        return mood switch
        {
            "Happy" => "mood-happy",
            "Sad" => "mood-sad",
            "Anxious" => "mood-anxious",
            "Neutral" => "mood-neutral",
            _ => "mood-neutral"
        };
    }
}
