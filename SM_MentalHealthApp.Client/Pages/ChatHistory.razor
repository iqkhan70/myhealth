@page "/chat-history"
@using SM_MentalHealthApp.Shared
@using System.Text.Json
@using SM_MentalHealthApp.Client.Services
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Chat History</PageTitle>

<style>
    .rz-datatable-scrollable-wrapper {
        overflow-x: hidden !important;
    }
    
    .rz-datatable-scrollable {
        overflow-x: hidden !important;
    }
    
    .rz-datatable-scrollbar {
        display: none !important;
    }
    
    .rz-datatable-scrollbar-vertical {
        display: none !important;
    }
    
    .rz-datatable-scrollbar-horizontal {
        display: none !important;
    }
    
    .conversation-messages {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    
    .message-content {
        word-wrap: break-word;
        white-space: pre-wrap;
        overflow-wrap: break-word;
        max-width: 100%;
    }
</style>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>üí¨ Chat History</h2>
            <p class="text-muted">View and search your conversation history with the AI assistant</p>
            
            @if (currentUserRole == "Doctor" && patients != null && patients.Any())
            {
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="patientFilter" class="form-label">Filter by Patient:</label>
                        <select id="patientFilter" class="form-select" @onchange="OnPatientFilterChanged">
                            <option value="">All Patients</option>
                            @foreach (var patient in patients)
                            {
                                <option value="@patient.Id" selected="@(selectedPatientId == patient.Id)">
                                    @patient.FullName
                                </option>
                            }
                        </select>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading chat sessions...</p>
        </div>
    }
    else if (sessions == null || !sessions.Any())
    {
        <div class="alert alert-info">
            <h4>No Chat History Found</h4>
            <p>You haven't had any conversations with the AI yet. Start chatting to see your history here!</p>
            <a href="/chat" class="btn btn-primary">Start Chatting</a>
        </div>
    }
    else
    {
        <RadzenDataGrid Data="@sessions" 
                        TItem="ChatSession" 
                        AllowPaging="true" 
                        PageSize="10"
                        AllowSorting="true"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Advanced"
                        ShowPagingSummary="true"
                        PagingSummaryFormat="Page {0} of {1} ({2} sessions)"
                        RowExpand="@OnRowExpand"
                        class="w-100"
                        style="overflow-x: hidden;">
            <Columns>
                <RadzenDataGridColumn TItem="ChatSession" Property="PatientId" Title="About Patient" Width="200px">
                    <Template Context="session">
                        @if (session.PatientId.HasValue)
                        {
                            <span class="badge bg-info">@(session.Patient?.FullName ?? $"Patient {session.PatientId}")</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">General Chat</span>
                        }
                        @if (session.UserId != GetCurrentUserId())
                        {
                            <span class="badge bg-warning ms-1">Doctor Chat</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="ChatSession" Property="MessageCount" Title="Messages" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="session">
                        <span class="badge bg-success">@session.MessageCount</span>
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="ChatSession" Property="CreatedAt" Title="Created" Width="150px">
                    <Template Context="session">
                        @session.CreatedAt.ToString("MM/dd/yyyy HH:mm")
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="ChatSession" Property="LastActivityAt" Title="Last Activity" Width="150px">
                    <Template Context="session">
                        @session.LastActivityAt.ToString("MM/dd/yyyy HH:mm")
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="ChatSession" Property="Summary" Title="Summary" Width="300px">
                    <Template Context="session">
                        @if (!string.IsNullOrEmpty(session.Summary))
                        {
                            <div class="text-truncate" style="max-width: 300px;" title="@session.Summary">
                                @(session.Summary.Length > 100 ? session.Summary.Substring(0, 100) + "..." : session.Summary)
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">No summary available</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="ChatSession" Sortable="false" Filterable="false" Title="Actions" Width="80px">
                    <Template Context="session">
                        <RadzenButton Text="Delete" 
                                    ButtonStyle="ButtonStyle.Danger" 
                                    Size="ButtonSize.Small"
                                    Click="@(() => DeleteSession(session))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
            
            <Template Context="session">
                @{
                    var expandedSession = expandedSessions.ContainsKey(session.Id) ? expandedSessions[session.Id] : session;
                }
                <div class="p-3">
                    <div class="row">
                        <div class="col-12">
                            <h6>Session Information</h6>
                            <p><strong>Created:</strong> @expandedSession.CreatedAt.ToString("MM/dd/yyyy HH:mm:ss") | 
                               <strong>Last Activity:</strong> @expandedSession.LastActivityAt.ToString("MM/dd/yyyy HH:mm:ss") | 
                               <strong>Messages:</strong> @expandedSession.MessageCount</p>
                            
                            @if (expandedSession.PatientId.HasValue)
                            {
                                <p><strong>About Patient:</strong> @(expandedSession.Patient?.FullName ?? $"Patient {expandedSession.PatientId}")</p>
                            }
                            
                            @if (!string.IsNullOrEmpty(expandedSession.Summary))
                            {
                                <div class="alert alert-light mb-3">
                                    <h6>üìù AI Summary</h6>
                                    <p>@expandedSession.Summary</p>
                                </div>
                            }
                            
                            <div class="conversation-messages" style="max-height: 400px; overflow-y: auto;">
                                @if (expandedSession.Messages != null && expandedSession.Messages.Any())
                                {
                                    @foreach (var message in expandedSession.Messages.OrderBy(m => m.Timestamp))
                                    {
                                        <div class="message mb-3 p-3 rounded @(message.Role == MessageRole.User ? "bg-light border" : "bg-light border-start border-4 border-info")">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <strong>
                                                    @if (message.Role == MessageRole.User)
                                                    {
                                                        <span>üë§ You</span>
                                                    }
                                                    else if (message.Role == MessageRole.Assistant)
                                                    {
                                                        <span>ü§ñ AI Assistant</span>
                                                    }
                                                    else
                                                    {
                                                        <span>‚öôÔ∏è System</span>
                                                    }
                                                </strong>
                                                <small class="text-muted">@message.Timestamp.ToString("HH:mm:ss")</small>
                                            </div>
                                            <div class="message-content" style="word-wrap: break-word; white-space: pre-wrap; overflow-wrap: break-word;">
                                                @message.Content
                                            </div>
                                            <div class="message-metadata mt-2">
                                                @if (message.IsMedicalData)
                                                {
                                                    <span class="badge bg-danger">Medical Data</span>
                                                }
                                                <span class="badge bg-secondary">@message.MessageType</span>
                                                @if (!string.IsNullOrEmpty(message.Metadata))
                                                {
                                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShowMetadata(message.Metadata)">
                                                        View Metadata
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted text-center">
                                        <p>No messages found in this session.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Template>
        </RadzenDataGrid>
    }
</div>

@code {
    private List<ChatSession>? sessions;
    private bool isLoading = true;
    private int? selectedPatientId = null;
    private List<User>? patients;
    private string? currentUserRole;
    private Dictionary<int, ChatSession> expandedSessions = new Dictionary<int, ChatSession>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        await LoadSessions();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            // Get current user info to determine role
            var userResponse = await Http.GetFromJsonAsync<AuthUser>("api/auth/me");
            currentUserRole = userResponse?.RoleName;
            
            // If user is a doctor, load their patients
            if (userResponse?.RoleId == 2)
            {
                var patientsResponse = await Http.GetFromJsonAsync<List<User>>("api/doctor/patients");
                patients = patientsResponse ?? new List<User>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user info: {ex.Message}");
        }
    }

    private async Task LoadSessions()
    {
        try
        {
            isLoading = true;
            var url = selectedPatientId.HasValue 
                ? $"api/chathistory/sessions?patientId={selectedPatientId.Value}"
                : "api/chathistory/sessions";
            var response = await Http.GetFromJsonAsync<List<ChatSession>>(url);
            sessions = response ?? new List<ChatSession>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sessions: {ex.Message}");
            sessions = new List<ChatSession>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnRowExpand(ChatSession session)
    {
        try
        {
            // Check if we already have the expanded data
            if (expandedSessions.ContainsKey(session.Id))
            {
                return; // Already loaded
            }

            // Load full session details with messages when row is expanded
            var sessionDetails = await Http.GetFromJsonAsync<ChatSession>($"api/chathistory/sessions/{session.Id}");
            if (sessionDetails != null)
            {
                // Store the expanded session data
                expandedSessions[session.Id] = sessionDetails;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading session details: {ex.Message}");
        }
    }

    private async Task DeleteSession(ChatSession session)
    {
        var confirmed = await DialogService.Confirm("Are you sure you want to delete this chat session? This action cannot be undone.", "Delete Session", 
            new ConfirmOptions() { OkButtonText = "Yes, Delete", CancelButtonText = "Cancel" });

        if (confirmed == true)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/chathistory/sessions/{session.Id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadSessions(); // Refresh the list
                    await JSRuntime.InvokeVoidAsync("alert", "Session deleted successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting session");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting session: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting session");
            }
        }
    }

    private async Task OnPatientFilterChanged(ChangeEventArgs e)
    {
        selectedPatientId = string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString()!);
        await LoadSessions();
    }

    private int GetCurrentUserId()
    {
        return AuthService.CurrentUser?.Id ?? 0;
    }

    private async Task ShowMetadata(string metadata)
    {
        try
        {
            var jsonObject = JsonSerializer.Deserialize<JsonElement>(metadata);
            var formattedJson = JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true });
            await JSRuntime.InvokeVoidAsync("alert", $"Metadata:\n\n{formattedJson}");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Metadata:\n\n{metadata}");
        }
    }
}