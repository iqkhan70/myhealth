@page "/change-password"
@using SM_MentalHealthApp.Client.Services
@using SM_MentalHealthApp.Shared
@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<div class="change-password-container">
    <div class="change-password-card">
        <div class="change-password-header">
            <h2>üîê Change Password</h2>
            <p>Please change your password to continue</p>
        </div>

        <div class="change-password-form">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            <div class="form-group">
                <label for="currentPassword">Current Password</label>
                <input type="password" 
                       id="currentPassword" 
                       class="form-control @(string.IsNullOrEmpty(currentPassword) && showValidation ? "is-invalid" : "")" 
                       @bind="currentPassword" 
                       placeholder="Enter your current password" 
                       disabled="@isLoading" />
                @if (string.IsNullOrEmpty(currentPassword) && showValidation)
                {
                    <div class="invalid-feedback">Current password is required</div>
                }
            </div>

            <div class="form-group">
                <label for="newPassword">New Password</label>
                <input type="password" 
                       id="newPassword" 
                       class="form-control @(string.IsNullOrEmpty(newPassword) && showValidation ? "is-invalid" : "")" 
                       @bind="newPassword" 
                       placeholder="Enter your new password (min 6 characters)" 
                       disabled="@isLoading" />
                @if (string.IsNullOrEmpty(newPassword) && showValidation)
                {
                    <div class="invalid-feedback">New password is required</div>
                }
                @if (!string.IsNullOrEmpty(newPassword) && newPassword.Length < 6)
                {
                    <div class="invalid-feedback">Password must be at least 6 characters long</div>
                }
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <input type="password" 
                       id="confirmPassword" 
                       class="form-control @(string.IsNullOrEmpty(confirmPassword) && showValidation ? "is-invalid" : "")" 
                       @bind="confirmPassword" 
                       placeholder="Confirm your new password" 
                       disabled="@isLoading" />
                @if (string.IsNullOrEmpty(confirmPassword) && showValidation)
                {
                    <div class="invalid-feedback">Password confirmation is required</div>
                }
                @if (!string.IsNullOrEmpty(confirmPassword) && newPassword != confirmPassword)
                {
                    <div class="invalid-feedback">Passwords do not match</div>
                }
            </div>

            <div class="form-actions">
                <button type="button" 
                        class="btn btn-primary btn-change-password" 
                        @onclick="HandleChangePassword" 
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    Change Password
                </button>
                
                <button type="button" 
                        class="btn btn-secondary btn-logout" 
                        @onclick="Logout" 
                        disabled="@isLoading">
                    <i class="nav-icon">üö™</i>
                    Logout Instead
                </button>
            </div>

            <div class="password-requirements">
                <h4>Password Requirements:</h4>
                <ul>
                    <li>At least 6 characters long</li>
                    <li>Must be different from current password</li>
                    <li>New password and confirmation must match</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    
    private bool isLoading = false;
    private bool showValidation = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Check if user actually needs to change password
        var user = AuthService.CurrentUser;
        if (user != null && !user.MustChangePassword)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async Task HandleChangePassword()
    {
        showValidation = true;
        errorMessage = "";
        successMessage = "";

        // Validate input
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "Please fill in all fields";
            return;
        }

        if (newPassword.Length < 6)
        {
            errorMessage = "New password must be at least 6 characters long";
            return;
        }

        if (newPassword != confirmPassword)
        {
            errorMessage = "New password and confirmation do not match";
            return;
        }

        if (currentPassword == newPassword)
        {
            errorMessage = "New password must be different from current password";
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var request = new ChangePasswordRequest
            {
                CurrentPassword = currentPassword,
                NewPassword = newPassword,
                ConfirmPassword = confirmPassword
            };

            var response = await Http.PostAsJsonAsync("api/auth/change-password", request);
            var result = await response.Content.ReadFromJsonAsync<ChangePasswordResponse>();

            if (result?.Success == true)
            {
                successMessage = "Password changed successfully! Redirecting...";
                
                // Refresh user data to clear MustChangePassword flag
                await AuthService.GetCurrentUserAsync();
                
                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result?.Message ?? "Failed to change password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Password change failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}
