@using SM_MentalHealthApp.Client.Services
@using SM_MentalHealthApp.Client.Components
@inherits LayoutComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IAuthService AuthService
@inject ISignalRService SignalRService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (!AuthService.IsInitialized)
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <p>Loading...</p>
    </div>
}
else
{
    <div class="rz-layout">
        <!-- Header with logout button -->
        @if (AuthService.CurrentUser != null)
        {
            <div class="app-header">
                <div class="header-content">
                    <div class="app-title">
                        <h1>Health Journal</h1>
                    </div>
                    <div class="header-user-info">
                        <div class="user-details">
                            <span class="user-name">@AuthService.CurrentUser.FullName</span>
                            <span class="user-email">@AuthService.CurrentUser.Email</span>
                        </div>
                        <button class="header-logout-btn" @onclick="Logout" title="Logout">
                            <i class="nav-icon">🚪</i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        }

        <div class="rz-layout-main">
            <div class="rz-layout-sidebar">
                <NavMenu />
            </div>

            <div class="rz-layout-body">
                <div class="rz-layout-content">
                    @Body
                </div>
            </div>
        </div>
    </div>
}

<!-- Incoming Call Modal -->
<IncomingCallModal IncomingCall="@incomingCall" OnCallAccepted="@HandleCallAccepted"
    OnCallDeclined="@HandleCallDeclined" />


@code {
    private CallInvitation? incomingCall;

    protected override async Task OnInitializedAsync()
    {
        // Set up SignalR event handlers
        SignalRService.OnIncomingCall += HandleIncomingCall;
        SignalRService.OnNewMessage += HandleNewMessage;
        SignalRService.OnCallEnded += HandleCallEnded;

        // Start SignalR connection if user is authenticated
        if (AuthService.CurrentUser != null)
        {
            Console.WriteLine("🔗 Web App: Starting SignalR connection for incoming calls...");
            await SignalRService.StartAsync();
        }
    }

    private void HandleIncomingCall(CallInvitation call)
    {
        // Filter calls - only show if this user is the target
        var currentUserId = AuthService.CurrentUser?.Id;
        if (currentUserId == null || call.TargetUserId != currentUserId)
        {
            Console.WriteLine($"🔍 Web App: Ignoring call - not for this user. Current: {currentUserId}, Target: {call.TargetUserId}");
            return;
        }

        Console.WriteLine($"📞 Web App: Incoming call from {call.CallerName} ({call.CallType})");
        incomingCall = call;
        InvokeAsync(StateHasChanged);

        // Show notification
        NotificationService.Notify(NotificationSeverity.Info, "Incoming Call",
        $"{call.CallType} call from {call.CallerName}");
    }

    private void HandleNewMessage(ChatMessage message)
    {
        // Show notification for new messages
        NotificationService.Notify(NotificationSeverity.Info, "New Message",
        $"Message from {message.SenderName}");
    }


    private void HandleCallEnded(string callId)
    {
        if (incomingCall?.CallId == callId)
        {
            incomingCall = null;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleCallAccepted(CallInvitation call)
    {
        incomingCall = null;

        try
        {
            // Navigate to the video call page to join the call
            var callUrl = call.CallType?.ToLower() == "video"
            ? $"/video-call/{call.CallerId}"
            : $"/audio-call/{call.CallerId}";

            Console.WriteLine($"🎯 Web App: Accepting {call.CallType} call from {call.CallerName}, navigating to {callUrl}");

            NotificationService.Notify(NotificationSeverity.Success, "Call Accepted",
            $"Joining {call.CallType} call with {call.CallerName}...");

            Navigation.NavigateTo(callUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Web App: Error accepting call: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Call Error",
            $"Failed to join call: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task HandleCallDeclined(CallInvitation call)
    {
        incomingCall = null;
        StateHasChanged();
    }

    private void ShowAbout()
    {
        DialogService.Open("About", ds =>
        @<div>
            <RadzenText TextStyle="TextStyle.H4" Text="Mental Health Journal" />
            <RadzenText Text="A compassionate AI-powered journaling app for mental health tracking and support." />
            <RadzenText Text="Built with Blazor WebAssembly and powered by Hugging Face AI models." />
        </div>,
        new DialogOptions() { Width = "500px", Resizable = true, Draggable = true });
    }

    private async Task Logout()
    {
        await SignalRService.StopAsync();
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up event handlers
        SignalRService.OnIncomingCall -= HandleIncomingCall;
        SignalRService.OnNewMessage -= HandleNewMessage;
        SignalRService.OnCallEnded -= HandleCallEnded;

        await SignalRService.StopAsync();
    }
}
