@using SM_MentalHealthApp.Client.Services
@inject ISignalRService SignalRService
@inject NotificationService NotificationService
@inject IJSRuntime JS

@if (IncomingCall != null)
{
    <div class="incoming-call-overlay">
        <div class="incoming-call-modal">
            <div class="call-header">
                <div class="caller-avatar">
                    @if (!string.IsNullOrEmpty(IncomingCall.CallerName))
                    {
                        @IncomingCall.CallerName.Substring(0, 1).ToUpper()
                    }
                    else
                    {
                        <text>?</text>
                    }
                </div>
                <div class="call-info">
                    <h3>@IncomingCall.CallerName</h3>
                    <p>@IncomingCall.CallerRole</p>
                    <p class="call-type">
                        @if (IncomingCall.CallType == "video")
                        {
                            <i class="fas fa-video"></i>
                    
                            <text> Video Call</text>
                        }
                        else
                        {
                            <i class="fas fa-phone"></i>
                    
                            <text> Audio Call</text>
                        }
                    </p>
                </div>
            </div>

            <div class="call-actions">
                <button class="btn-decline" @onclick="DeclineCall">
                    <i class="fas fa-phone-slash"></i>
                    Decline
                </button>
                <button class="btn-accept" @onclick="AcceptCall">
                    <i class="fas fa-phone"></i>
                    Accept
                </button>
            </div>

            <div class="call-timer">
                Incoming @IncomingCall.CallType call...
            </div>
        </div>
    </div>
}

<style>
    .incoming-call-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        animation: fadeIn 0.3s ease-in-out;
    }

    .incoming-call-modal {
        background: white;
        border-radius: 20px;
        padding: 30px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        min-width: 350px;
        animation: slideUp 0.3s ease-out;
    }

    .call-header {
        margin-bottom: 30px;
    }

    .caller-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: #2196F3;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        font-weight: bold;
        margin: 0 auto 15px;
        animation: pulse 2s infinite;
    }

    .call-info h3 {
        margin: 0 0 5px;
        font-size: 24px;
        color: #333;
    }

    .call-info p {
        margin: 0 0 5px;
        color: #666;
        font-size: 16px;
    }

    .call-type {
        color: #2196F3 !important;
        font-weight: 600;
    }

    .call-type i {
        margin-right: 8px;
    }

    .call-actions {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 20px;
    }

    .btn-decline,
    .btn-accept {
        flex: 1;
        padding: 15px 20px;
        border: none;
        border-radius: 50px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-decline {
        background: #f44336;
        color: white;
    }

    .btn-decline:hover {
        background: #d32f2f;
        transform: translateY(-2px);
    }

    .btn-accept {
        background: #4CAF50;
        color: white;
    }

    .btn-accept:hover {
        background: #388E3C;
        transform: translateY(-2px);
    }

    .call-timer {
        color: #666;
        font-size: 14px;
        animation: blink 1.5s infinite;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }
    }

    @@keyframes blink {

        0%,
        50% {
            opacity: 1;
        }

        51%,
        100% {
            opacity: 0.5;
        }
    }
</style>

@code {
    [Parameter] public CallInvitation? IncomingCall { get; set; }
    [Parameter] public EventCallback<CallInvitation> OnCallAccepted { get; set; }
    [Parameter] public EventCallback<CallInvitation> OnCallDeclined { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IncomingCall != null)
        {
            // Play incoming call sound
            await JS.InvokeVoidAsync("playIncomingCallSound");
        }
    }

    private async Task AcceptCall()
    {
        if (IncomingCall == null)
        {
            Console.WriteLine("IncomingCall is null in AcceptCall");
            return;
        }

        try
        {
            if (SignalRService == null)
            {
                Console.WriteLine("SignalRService is null in AcceptCall");
            }
            else
            {
                await SignalRService.AcceptCallAsync(IncomingCall.CallId);
            }

            if (OnCallAccepted.HasDelegate)
            {
                await OnCallAccepted.InvokeAsync(IncomingCall);
            }

            try
            {
                NotificationService?.Notify(NotificationSeverity.Success, "Call Accepted",
                    $"Accepted {IncomingCall.CallType} call from {IncomingCall.CallerName}");
            }
            catch (Exception notifEx)
            {
                Console.WriteLine($"NotificationService failed in AcceptCall: {notifEx.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AcceptCall: {ex.Message}\n{ex}");
            try
            {
                NotificationService?.Notify(NotificationSeverity.Error, "Call Error",
                    $"Failed to accept call: {ex.Message}");
            }
            catch { }
        }
    }

    private async Task DeclineCall()
    {
        if (IncomingCall == null)
        {
            Console.WriteLine("IncomingCall is null in DeclineCall");
            return;
        }

        try
        {
            if (SignalRService == null)
            {
                Console.WriteLine("SignalRService is null in DeclineCall");
            }
            else
            {
                await SignalRService.RejectCallAsync(IncomingCall.CallId);
            }

            if (OnCallDeclined.HasDelegate)
            {
                await OnCallDeclined.InvokeAsync(IncomingCall);
            }

            try
            {
                NotificationService?.Notify(NotificationSeverity.Info, "Call Declined",
                    $"Declined {IncomingCall.CallType} call from {IncomingCall.CallerName}");
            }
            catch (Exception notifEx)
            {
                Console.WriteLine($"NotificationService failed in DeclineCall: {notifEx.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeclineCall: {ex.Message}\n{ex}");
            try
            {
                NotificationService?.Notify(NotificationSeverity.Error, "Call Error",
                    $"Failed to decline call: {ex.Message}");
            }
            catch { }
        }
    }
}
